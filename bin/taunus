#!/usr/bin/env node

var argv = require('minimist')(process.argv.slice(2));
var path = require('path');
var util = require('util');
var rc = require('../lib/rc');
var cwd = process.cwd();
var file = argv._[0];
var routeModule = path.resolve(cwd, file);
var routes = require(routeModule);
var data = template(routes);

if (argv.o) {
  fs.writeFileSync(argv.o, data);
} else {
  console.log(data);
}

function template (routes) {
  var buffer = [];
  var first = true;

  put('module.exports = [');
  routes.forEach(partial);
  put('];\n');

  function partial (route) {
    var open = first ? '{\n' : ', {\n';
    first = false;
    put(open);
    put('  route: "%s",\n', route.route);
    put('  template: require("%s"),\n', getTemplatePath(route));
    put('  controller: require("%s")\n', getControllerPath(route));
    put('}');
  }

  function put () {
    var value = util.format.apply(util, arguments);
    buffer.push(value);
  }

  return buffer.join('');
}

function getTemplatePath (route) {
  console.log(cwd,rc.views,route.action);
  console.log(rc.client_routes);
  var relative = path.resolve(cwd, rc.views, route.action);
  console.log('template', relative);
}

function getControllerPath (route) {
  var relative = path.resolve(cwd, rc.client_controllers, route.action);
  console.log('controller', relative);
}
