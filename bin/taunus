#!/usr/bin/env node

'use strict';

var argv = require('minimist')(process.argv.slice(2), {
  alias: {
    replacements: 'r',
    standalone: 's',
    output: 'o',
    watch: 'w',
    transform: 't'
  }
});
var path = require('path');
var fs = require('fs');
var chalk = require('chalk');
var browserify = require('browserify');
var rc = require('../lib/rc');
var cli = require('../lib/cli');
var replacements = argv.replacements ? require(argv.replacements) : null;
var standalone = argv.standalone;
var t = argv.transform ? require(argv.transform) : identity;

function output (force) {
  var data = cli.render(force, replacements, t);

  if (standalone || argv.output) {
    fs.writeFileSync(rc.client_wiring, data);
  } else {
    console.log(data);
  }
  if (standalone) {
    browser();
  }
}

function identity (d) { return d; }

function browser () {
  var b = browserify();
  var lib = path.join(__dirname, '../browser/standalone');
  var routes = path.resolve(rc.client_wiring);
  b.require(routes, { expose: 'embedded-wiring' });
  b.add(lib);
  b.bundle({ standalone: 'taunus' }).pipe(out());

  function out () {
    if (!argv.output) {
      return process.stdout;
    } else {
      return fs.createWriteStream(standalone, { encoding: 'utf8' });
    }
  }
}

function watch () {
  var chokidar = require('chokidar');
  var location = path.resolve(rc.server_routes);
  var watcher = chokidar.watch(location, { persistent: true });

  console.log(chalk.yellow('taunus: watching...'));

  watcher.on('change', function () {
    console.log(chalk.yellow('taunus: Route change detected. Rendering client-side routes.'));
    output(true);
  });
}

output();

if (argv.watch) {
  watch();
}
